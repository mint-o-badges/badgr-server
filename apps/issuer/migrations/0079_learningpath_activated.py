# Generated by Django 3.2 on 2025-07-04 09:56

from django.db import migrations, models
from issuer.models import LearningPath, LearningPathBadge, BadgeInstance


def set_activation_for_existing_learningpaths(apps, schema_editor):
    """
    Set activated=True for existing learning paths that have been awarded to users.
    """

    for learning_path in LearningPath.objects.all():
        lp_badges = LearningPathBadge.objects.filter(learning_path=learning_path)

        if lp_badges.exists():
            lp_badgeclasses = [lp_badge.badge for lp_badge in lp_badges]

            instances = BadgeInstance.objects.filter(
                badgeclass__in=lp_badgeclasses, revoked=False
            )

            if instances.exists():
                learning_path.activated = True
                learning_path.save(update_fields=["activated"])


def reverse_activation_for_existing_learningpaths(apps, schema_editor):
    """
    Reverse migration: set all learning paths to activated=False
    """
    LearningPath.objects.all().update(activated=False)


class Migration(migrations.Migration):
    dependencies = [
        ("issuer", "0078_learningpath_required_badges_count"),
    ]

    operations = [
        # First, add the field with default=False
        migrations.AddField(
            model_name="learningpath",
            name="activated",
            field=models.BooleanField(default=False),
        ),
        # Then run the data migration to set activated=True for awarded learning paths
        migrations.RunPython(
            set_activation_for_existing_learningpaths,
            reverse_activation_for_existing_learningpaths,
        ),
    ]
